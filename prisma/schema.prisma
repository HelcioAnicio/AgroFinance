generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String          @id @default(uuid())
  name          String
  email         String          @unique
  cnpj          String?         @unique
  password      String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  animals       Animal[]
  Authenticator Authenticator[]
  sessions      Session[]
}

model Animal {
  id                  String      @id @default(dbgenerated("gen_random_uuid()"))
  manualId            Int
  gender              String
  birthDate           DateTime
  weight              Float
  breed               String
  category            String
  motherId            String?
  fatherId            String?
  reproductiveStatus  String?
  handlingType        String?
  bullId              String?
  protocol            String?
  andrological        String?
  expectedDueDate     DateTime?
  fetalGender         String?
  bullIatf            String?
  bodyConditionScore  Float?
  observations        String?
  ownerId             String
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @default(now()) @updatedAt
  bull                Animal?     @relation("BullHandling", fields: [bullId], references: [id])
  offspringFromBull   Animal[]    @relation("BullHandling")
  father              Animal?     @relation("FatherOffspring", fields: [fatherId], references: [id])
  offspringFromFather Animal[]    @relation("FatherOffspring")
  mother              Animal?     @relation("MotherOffspring", fields: [motherId], references: [id])
  offspringFromMother Animal[]    @relation("MotherOffspring")
  owner               User        @relation(fields: [ownerId], references: [id])
  dewormings          Deworming[] @relation("AnimalDewormings")
  diseases            Disease[]   @relation("AnimalDiseases")
  vaccines            Vaccine[]   @relation("AnimalVaccines")
}

model Disease {
  id          String   @id @default(uuid())
  name        String
  description String?
  date        DateTime
  animalId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  animal      Animal   @relation("AnimalDiseases", fields: [animalId], references: [id])
}

model Vaccine {
  id          String   @id @default(uuid())
  name        String
  description String?
  date        DateTime
  animalId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  animal      Animal   @relation("AnimalVaccines", fields: [animalId], references: [id])
}

model Deworming {
  id        String   @id @default(uuid())
  name      String
  date      DateTime
  animalId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  animal    Animal   @relation("AnimalDewormings", fields: [animalId], references: [id])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
